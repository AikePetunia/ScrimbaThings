
/*
Useful pages:
https://heropatterns.com/


The box model explains how HTML elements are structured and spaced. It consists of:

1. Margin (Outer spacing of the box)
   - Example:
     margin-top: 10px; /* Space above the box */
     margin-bottom: 10px; /* Space below the box */
     margin-left: 10px; /* Space to the left of the box */
     margin-right: 10px; /* Space to the right of the box */

2. Padding (Inner spacing of the box)
   - Example:
     padding-top: 10px; /* Space inside the box at the top */
     padding-bottom: 10px; /* Space inside the box at the bottom */
     padding-left: 10px; /* Space inside the box on the left */
     padding-right: 10px; /* Space inside the box on the right */

   Shorthand for padding and margin follows a clockwise direction:
     padding: 10px; /* Applies 10px to all sides */
     padding: 10px 20px; /* 10px to top/bottom, 20px to left/right */
     padding: 10px 20px 30px 40px; /* Top, right, bottom, left */
     (Same applies to margin)

3. Border (Defines the outline of the box)
   - Example:
     border: 4px solid #COLOR; /* Solid border with a specified color */
     border-radius: 10px; /* Rounds the corners */

4. Content (The actual text or elements inside the box)
   - Example:
     content: "Text here"; /* Used in pseudo-elements like ::before or ::after */

Display Property:
-----------------
This determines how elements are displayed:
   - display: block; /* Stacks elements vertically */
   - display: inline; /* Aligns elements horizontally */
   - display: inline-block; /* Behaves like a block but aligns inline */
   - display: flex; /* Enables Flexbox layout */

Text Alignment:
---------------
Aligns text within block-level elements:
   - text-align: center; /* Centers text */
   - text-align: left; /* Aligns text to the left */
   - text-align: right; /* Aligns text to the right */

Flexbox Layout:
---------------
A powerful tool for alignment and spacing:
   - display: flex; /* Enables Flexbox layout for the container */
   - justify-content: /* Aligns child elements horizontally */
       - center; /* Centers elements */
       - flex-start; /* Aligns to the start */
       - flex-end; /* Aligns to the end */
       - space-between; /* Equal space between elements */
       - space-around; /* Equal space around elements */

Responsive Design:

flex-shrink: 0; /* Prevents items from shrinking */
------------------
Ensures the layout adapts to different screen sizes:

1. Media Queries:
   Example:
     @media (max-width: 768px) {
         body {
             font-size: 14px; /* Adjust font size for smaller screens */
         }
     }

2. Units of Measurement:
   - px: Fixed size in pixels.
   - %: Relative to the parent container.
   - vh: Relative to the viewport height.
   - vw: Relative to the viewport width.
   - em: Relative to the parent's font size.
   - rem: Relative to the root element's font size.

3. Flexbox and Grid:
   Use Flexbox or Grid for adaptable layouts.

4. Frameworks:
   CSS frameworks like Bootstrap provide responsive components.
*/

button {
    /* Button styling */
    color: #0f1419;
    border: 1px solid #cfd9de;
    border-radius: 18px;
    background: white;
    padding: 8px 16px;
    font-weight: bold;
}

.search-input {
    /* Search input styling */
    display: block;
    width: 400px;
    margin: 0 auto;
    line-height: 24px;
    padding: 10px 30px;
    border: 1px solid #dfe1e5;
    border-radius: 24px;
}

.btn {
    /* Center button horizontally */
    display: block;
    margin: 0 auto;
}

.nav-wrapper {
    /* Navigation wrapper */
    display: flex;
    justify-content: center;
}

/*
Debugging tip:
To visualize element margins and borders:
   * {
       outline: 1px solid red;
   }
*/

/*
Font styling:
- Use widely available fonts for faster load times.
- Web-safe fonts are pre-installed on most devices.
- Use Google Fonts for additional options.
- Add fallback fonts separated by a comma.
  Example:
    font-family: 'Arial', sans-serif;
*/

.nav-list {
   list-style: none; /* Removes default list styling */ 
}

li::marker {
   color: black; /*Changes the color of the losts*/
}

nav > img { /*** Selects the img element inside a nav element ***/
   width: 30px;
}

/*
Gap
It's for grid layout, it's the space between grid items.
*/

main {
   padding: 60px 30px;
   background-image: url(/images/react-logo-half.png); /* Background image */
   background-repeat: no-repeat ; /* No repeating of the image, making one img */
   background-position: right; /* Position the image to the right */
}
